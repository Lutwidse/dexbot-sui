'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _utils = _interopRequireDefault(require("../utils.js"));

var _AxiosError = _interopRequireDefault(require("../core/AxiosError.js"));

var _transitional = _interopRequireDefault(require("./transitional.js"));

var _toFormData = _interopRequireDefault(require("../helpers/toFormData.js"));

var _toURLEncodedForm = _interopRequireDefault(require("../helpers/toURLEncodedForm.js"));

var _index = _interopRequireDefault(require("../platform/index.js"));

var _formDataToJSON = _interopRequireDefault(require("../helpers/formDataToJSON.js"));

var _index2 = _interopRequireDefault(require("../adapters/index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};
/**
 * If the browser has an XMLHttpRequest object, use the XHR adapter, otherwise use the HTTP
 * adapter
 *
 * @returns {Function}
 */

function getDefaultAdapter() {
  var adapter;

  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = _index2["default"].getAdapter('xhr');
  } else if (typeof process !== 'undefined' && _utils["default"].kindOf(process) === 'process') {
    // For node use HTTP adapter
    adapter = _index2["default"].getAdapter('http');
  }

  return adapter;
}
/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */


function stringifySafely(rawValue, parser, encoder) {
  if (_utils["default"].isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return _utils["default"].trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {
  transitional: _transitional["default"],
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    var contentType = headers.getContentType() || '';
    var hasJSONContentType = contentType.indexOf('application/json') > -1;

    var isObjectPayload = _utils["default"].isObject(data);

    if (isObjectPayload && _utils["default"].isHTMLForm(data)) {
      data = new FormData(data);
    }

    var isFormData = _utils["default"].isFormData(data);

    if (isFormData) {
      if (!hasJSONContentType) {
        return data;
      }

      return hasJSONContentType ? JSON.stringify((0, _formDataToJSON["default"])(data)) : data;
    }

    if (_utils["default"].isArrayBuffer(data) || _utils["default"].isBuffer(data) || _utils["default"].isStream(data) || _utils["default"].isFile(data) || _utils["default"].isBlob(data)) {
      return data;
    }

    if (_utils["default"].isArrayBufferView(data)) {
      return data.buffer;
    }

    if (_utils["default"].isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    var isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return (0, _toURLEncodedForm["default"])(data, this.formSerializer).toString();
      }

      if ((isFileList = _utils["default"].isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        var _FormData = this.env && this.env.FormData;

        return (0, _toFormData["default"])(isFileList ? {
          'files[]': data
        } : data, _FormData && new _FormData(), this.formSerializer);
      }
    }

    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }

    return data;
  }],
  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var JSONRequested = this.responseType === 'json';

    if (data && _utils["default"].isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      var silentJSONParsing = transitional && transitional.silentJSONParsing;
      var strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw _AxiosError["default"].from(e, _AxiosError["default"].ERR_BAD_RESPONSE, this, null, this.response);
          }

          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: _index["default"].classes.FormData,
    Blob: _index["default"].classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

_utils["default"].forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

_utils["default"].forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = _utils["default"].merge(DEFAULT_CONTENT_TYPE);
});

var _default = defaults;
exports["default"] = _default;
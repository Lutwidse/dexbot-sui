'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _utils = _interopRequireDefault(require("../utils.js"));

var _parseHeaders = _interopRequireDefault(require("../helpers/parseHeaders.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var $internals = Symbol('internals');
var $defaults = Symbol('defaults');

function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return _utils["default"].isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
  var tokens = Object.create(null);
  var tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  var match;

  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

function matchHeaderValue(context, value, header, filter) {
  if (_utils["default"].isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (!_utils["default"].isString(value)) return;

  if (_utils["default"].isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (_utils["default"].isRegExp(filter)) {
    return filter.test(value);
  }
}

function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, function (w, _char, str) {
    return _char.toUpperCase() + str;
  });
}

function buildAccessors(obj, header) {
  var accessorName = _utils["default"].toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(function (methodName) {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function value(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

function findKey(obj, key) {
  key = key.toLowerCase();
  var keys = Object.keys(obj);
  var i = keys.length;

  var _key;

  while (i-- > 0) {
    _key = keys[i];

    if (key === _key.toLowerCase()) {
      return _key;
    }
  }

  return null;
}

function AxiosHeaders(headers, defaults) {
  headers && this.set(headers);
  this[$defaults] = defaults || null;
}

Object.assign(AxiosHeaders.prototype, {
  set: function set(header, valueOrRewrite, rewrite) {
    var self = this;

    function setHeader(_value, _header, _rewrite) {
      var lHeader = normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      var key = findKey(self, lHeader);

      if (key && _rewrite !== true && (self[key] === false || _rewrite === false)) {
        return;
      }

      self[key || _header] = normalizeValue(_value);
    }

    if (_utils["default"].isPlainObject(header)) {
      _utils["default"].forEach(header, function (_value, _header) {
        setHeader(_value, _header, valueOrRewrite);
      });
    } else {
      setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  },
  get: function get(header, parser) {
    header = normalizeHeader(header);
    if (!header) return undefined;
    var key = findKey(this, header);

    if (key) {
      var value = this[key];

      if (!parser) {
        return value;
      }

      if (parser === true) {
        return parseTokens(value);
      }

      if (_utils["default"].isFunction(parser)) {
        return parser.call(this, value, key);
      }

      if (_utils["default"].isRegExp(parser)) {
        return parser.exec(value);
      }

      throw new TypeError('parser must be boolean|regexp|function');
    }
  },
  has: function has(header, matcher) {
    header = normalizeHeader(header);

    if (header) {
      var key = findKey(this, header);
      return !!(key && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  },
  "delete": function _delete(header, matcher) {
    var self = this;
    var deleted = false;

    function deleteHeader(_header) {
      _header = normalizeHeader(_header);

      if (_header) {
        var key = findKey(self, _header);

        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];
          deleted = true;
        }
      }
    }

    if (_utils["default"].isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  },
  clear: function clear() {
    return Object.keys(this).forEach(this["delete"].bind(this));
  },
  normalize: function normalize(format) {
    var self = this;
    var headers = {};

    _utils["default"].forEach(this, function (value, header) {
      var key = findKey(headers, header);

      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }

      var normalized = format ? formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });

    return this;
  },
  toJSON: function toJSON(asStrings) {
    var obj = Object.create(null);

    _utils["default"].forEach(Object.assign({}, this[$defaults] || null, this), function (value, header) {
      if (value == null || value === false) return;
      obj[header] = asStrings && _utils["default"].isArray(value) ? value.join(', ') : value;
    });

    return obj;
  }
});
Object.assign(AxiosHeaders, {
  from: function from(thing) {
    if (_utils["default"].isString(thing)) {
      return new this((0, _parseHeaders["default"])(thing));
    }

    return thing instanceof this ? thing : new this(thing);
  },
  accessor: function accessor(header) {
    var internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    var accessors = internals.accessors;
    var prototype = this.prototype;

    function defineAccessor(_header) {
      var lHeader = normalizeHeader(_header);

      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    _utils["default"].isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
});
AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent']);

_utils["default"].freezeMethods(AxiosHeaders.prototype);

_utils["default"].freezeMethods(AxiosHeaders);

var _default = AxiosHeaders;
exports["default"] = _default;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = dispatchRequest;

var _transformData = _interopRequireDefault(require("./transformData.js"));

var _isCancel = _interopRequireDefault(require("../cancel/isCancel.js"));

var _index = _interopRequireDefault(require("../defaults/index.js"));

var _CanceledError = _interopRequireDefault(require("../cancel/CanceledError.js"));

var _AxiosHeaders = _interopRequireDefault(require("../core/AxiosHeaders.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new _CanceledError["default"]();
  }
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */


function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = _AxiosHeaders["default"].from(config.headers); // Transform request data

  config.data = _transformData["default"].call(config, config.transformRequest);
  var adapter = config.adapter || _index["default"].adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config); // Transform response data

    response.data = _transformData["default"].call(config, config.transformResponse, response);
    response.headers = _AxiosHeaders["default"].from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!(0, _isCancel["default"])(reason)) {
      throwIfCancellationRequested(config); // Transform response data

      if (reason && reason.response) {
        reason.response.data = _transformData["default"].call(config, config.transformResponse, reason.response);
        reason.response.headers = _AxiosHeaders["default"].from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _utils = _interopRequireDefault(require("../utils.js"));

var _AxiosError = _interopRequireDefault(require("../core/AxiosError.js"));

var _FormData = _interopRequireDefault(require("../env/classes/FormData.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return _utils["default"].isPlainObject(thing) || _utils["default"].isArray(thing);
}
/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */


function removeBrackets(key) {
  return _utils["default"].endsWith(key, '[]') ? key.slice(0, -2) : key;
}
/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */


function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}
/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */


function isFlatArray(arr) {
  return _utils["default"].isArray(arr) && !arr.some(isVisitable);
}

var predicates = _utils["default"].toFlatObject(_utils["default"], {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */


function isSpecCompliant(thing) {
  return thing && _utils["default"].isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator];
}
/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */


function toFormData(obj, formData, options) {
  if (!_utils["default"].isObject(obj)) {
    throw new TypeError('target must be an object');
  } // eslint-disable-next-line no-param-reassign


  formData = formData || new (_FormData["default"] || FormData)(); // eslint-disable-next-line no-param-reassign

  options = _utils["default"].toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !_utils["default"].isUndefined(source[option]);
  });
  var metaTokens = options.metaTokens; // eslint-disable-next-line no-use-before-define

  var visitor = options.visitor || defaultVisitor;
  var dots = options.dots;
  var indexes = options.indexes;

  var _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;

  var useBlob = _Blob && isSpecCompliant(formData);

  if (!_utils["default"].isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (_utils["default"].isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && _utils["default"].isBlob(value)) {
      throw new _AxiosError["default"]('Blob is not supported. Use a Buffer instead.');
    }

    if (_utils["default"].isArrayBuffer(value) || _utils["default"].isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }
  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */


  function defaultVisitor(value, key, path) {
    var arr = value;

    if (value && !path && _typeof(value) === 'object') {
      if (_utils["default"].endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2); // eslint-disable-next-line no-param-reassign

        value = JSON.stringify(value);
      } else if (_utils["default"].isArray(value) && isFlatArray(value) || _utils["default"].isFileList(value) || _utils["default"].endsWith(key, '[]') && (arr = _utils["default"].toArray(value))) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(_utils["default"].isUndefined(el) || el === null) && formData.append( // eslint-disable-next-line no-nested-ternary
          indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + '[]', convertValue(el));
        });
        return false;
      }
    }

    if (isVisitable(value)) {
      return true;
    }

    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }

  var stack = [];
  var exposedHelpers = Object.assign(predicates, {
    defaultVisitor: defaultVisitor,
    convertValue: convertValue,
    isVisitable: isVisitable
  });

  function build(value, path) {
    if (_utils["default"].isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    _utils["default"].forEach(value, function each(el, key) {
      var result = !(_utils["default"].isUndefined(el) || el === null) && visitor.call(formData, el, _utils["default"].isString(key) ? key.trim() : key, path, exposedHelpers);

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!_utils["default"].isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);
  return formData;
}

var _default = toFormData;
exports["default"] = _default;
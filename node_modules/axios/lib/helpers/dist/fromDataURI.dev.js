'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = fromDataURI;

var _AxiosError = _interopRequireDefault(require("../core/AxiosError.js"));

var _parseProtocol = _interopRequireDefault(require("./parseProtocol.js"));

var _index = _interopRequireDefault(require("../platform/index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;
/**
 * Parse data uri to a Buffer or Blob
 *
 * @param {String} uri
 * @param {?Boolean} asBlob
 * @param {?Object} options
 * @param {?Function} options.Blob
 *
 * @returns {Buffer|Blob}
 */

function fromDataURI(uri, asBlob, options) {
  var _Blob = options && options.Blob || _index["default"].classes.Blob;

  var protocol = (0, _parseProtocol["default"])(uri);

  if (asBlob === undefined && _Blob) {
    asBlob = true;
  }

  if (protocol === 'data') {
    uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
    var match = DATA_URL_PATTERN.exec(uri);

    if (!match) {
      throw new _AxiosError["default"]('Invalid URL', _AxiosError["default"].ERR_INVALID_URL);
    }

    var mime = match[1];
    var isBase64 = match[2];
    var body = match[3];
    var buffer = Buffer.from(decodeURIComponent(body), isBase64 ? 'base64' : 'utf8');

    if (asBlob) {
      if (!_Blob) {
        throw new _AxiosError["default"]('Blob is not supported', _AxiosError["default"].ERR_NOT_SUPPORT);
      }

      return new _Blob([buffer], {
        type: mime
      });
    }

    return buffer;
  }

  throw new _AxiosError["default"]('Unsupported protocol ' + protocol, _AxiosError["default"].ERR_NOT_SUPPORT);
}
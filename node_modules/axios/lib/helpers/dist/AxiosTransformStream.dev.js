'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _stream = _interopRequireDefault(require("stream"));

var _utils = _interopRequireDefault(require("../utils.js"));

var _throttle = _interopRequireDefault(require("./throttle.js"));

var _speedometer2 = _interopRequireDefault(require("./speedometer.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var kInternals = Symbol('internals');

var AxiosTransformStream =
/*#__PURE__*/
function (_stream$Transform) {
  _inherits(AxiosTransformStream, _stream$Transform);

  function AxiosTransformStream(options) {
    var _this;

    _classCallCheck(this, AxiosTransformStream);

    options = _utils["default"].toFlatObject(options, {
      maxRate: 0,
      chunkSize: 64 * 1024,
      minChunkSize: 100,
      timeWindow: 500,
      ticksRate: 2,
      samplesCount: 15
    }, null, function (prop, source) {
      return !_utils["default"].isUndefined(source[prop]);
    });
    _this = _possibleConstructorReturn(this, _getPrototypeOf(AxiosTransformStream).call(this, {
      readableHighWaterMark: options.chunkSize
    }));

    var self = _assertThisInitialized(_this);

    var internals = _this[kInternals] = {
      length: options.length,
      timeWindow: options.timeWindow,
      ticksRate: options.ticksRate,
      chunkSize: options.chunkSize,
      maxRate: options.maxRate,
      minChunkSize: options.minChunkSize,
      bytesSeen: 0,
      isCaptured: false,
      notifiedBytesLoaded: 0,
      ts: Date.now(),
      bytes: 0,
      onReadCallback: null
    };

    var _speedometer = (0, _speedometer2["default"])(internals.ticksRate * options.samplesCount, internals.timeWindow);

    _this.on('newListener', function (event) {
      if (event === 'progress') {
        if (!internals.isCaptured) {
          internals.isCaptured = true;
        }
      }
    });

    var bytesNotified = 0;
    internals.updateProgress = (0, _throttle["default"])(function throttledHandler() {
      var totalBytes = internals.length;
      var bytesTransferred = internals.bytesSeen;
      var progressBytes = bytesTransferred - bytesNotified;
      if (!progressBytes || self.destroyed) return;

      var rate = _speedometer(progressBytes);

      bytesNotified = bytesTransferred;
      process.nextTick(function () {
        self.emit('progress', {
          'loaded': bytesTransferred,
          'total': totalBytes,
          'progress': totalBytes ? bytesTransferred / totalBytes : undefined,
          'bytes': progressBytes,
          'rate': rate ? rate : undefined,
          'estimated': rate && totalBytes && bytesTransferred <= totalBytes ? (totalBytes - bytesTransferred) / rate : undefined
        });
      });
    }, internals.ticksRate);

    var onFinish = function onFinish() {
      internals.updateProgress(true);
    };

    _this.once('end', onFinish);

    _this.once('error', onFinish);

    return _this;
  }

  _createClass(AxiosTransformStream, [{
    key: "_read",
    value: function _read(size) {
      var internals = this[kInternals];

      if (internals.onReadCallback) {
        internals.onReadCallback();
      }

      return _get(_getPrototypeOf(AxiosTransformStream.prototype), "_read", this).call(this, size);
    }
  }, {
    key: "_transform",
    value: function _transform(chunk, encoding, callback) {
      var self = this;
      var internals = this[kInternals];
      var maxRate = internals.maxRate;
      var readableHighWaterMark = this.readableHighWaterMark;
      var timeWindow = internals.timeWindow;
      var divider = 1000 / timeWindow;
      var bytesThreshold = maxRate / divider;
      var minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;

      function pushChunk(_chunk, _callback) {
        var bytes = Buffer.byteLength(_chunk);
        internals.bytesSeen += bytes;
        internals.bytes += bytes;

        if (internals.isCaptured) {
          internals.updateProgress();
        }

        if (self.push(_chunk)) {
          process.nextTick(_callback);
        } else {
          internals.onReadCallback = function () {
            internals.onReadCallback = null;
            process.nextTick(_callback);
          };
        }
      }

      var transformChunk = function transformChunk(_chunk, _callback) {
        var chunkSize = Buffer.byteLength(_chunk);
        var chunkRemainder = null;
        var maxChunkSize = readableHighWaterMark;
        var bytesLeft;
        var passed = 0;

        if (maxRate) {
          var now = Date.now();

          if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
            internals.ts = now;
            bytesLeft = bytesThreshold - internals.bytes;
            internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
            passed = 0;
          }

          bytesLeft = bytesThreshold - internals.bytes;
        }

        if (maxRate) {
          if (bytesLeft <= 0) {
            // next time window
            return setTimeout(function () {
              _callback(null, _chunk);
            }, timeWindow - passed);
          }

          if (bytesLeft < maxChunkSize) {
            maxChunkSize = bytesLeft;
          }
        }

        if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
          chunkRemainder = _chunk.subarray(maxChunkSize);
          _chunk = _chunk.subarray(0, maxChunkSize);
        }

        pushChunk(_chunk, chunkRemainder ? function () {
          process.nextTick(_callback, null, chunkRemainder);
        } : _callback);
      };

      transformChunk(chunk, function transformNextChunk(err, _chunk) {
        if (err) {
          return callback(err);
        }

        if (_chunk) {
          transformChunk(_chunk, transformNextChunk);
        } else {
          callback(null);
        }
      });
    }
  }, {
    key: "setLength",
    value: function setLength(length) {
      this[kInternals].length = +length;
      return this;
    }
  }]);

  return AxiosTransformStream;
}(_stream["default"].Transform);

var _default = AxiosTransformStream;
exports["default"] = _default;
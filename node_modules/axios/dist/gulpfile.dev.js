"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageJSON = exports.version = exports.clear = exports.env = exports.bower = void 0;

var _gulp = _interopRequireDefault(require("gulp"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

_gulp["default"].task('default', function _callee() {
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          console.log('hello!');

        case 1:
        case "end":
          return _context.stop();
      }
    }
  });
});

var clear = _gulp["default"].task('clear', function _callee2() {
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return regeneratorRuntime.awrap(_fsExtra["default"].emptyDir('./dist/'));

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  });
});

exports.clear = clear;

var bower = _gulp["default"].task('bower', function _callee3() {
  var npm, bower, fields, i, l, field;
  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.t0 = JSON;
          _context3.next = 3;
          return regeneratorRuntime.awrap(_fsExtra["default"].readFile('package.json'));

        case 3:
          _context3.t1 = _context3.sent;
          npm = _context3.t0.parse.call(_context3.t0, _context3.t1);
          _context3.t2 = JSON;
          _context3.next = 8;
          return regeneratorRuntime.awrap(_fsExtra["default"].readFile('bower.json'));

        case 8:
          _context3.t3 = _context3.sent;
          bower = _context3.t2.parse.call(_context3.t2, _context3.t3);
          fields = ['name', 'description', 'version', 'homepage', 'license', 'keywords'];

          for (i = 0, l = fields.length; i < l; i++) {
            field = fields[i];
            bower[field] = npm[field];
          }

          _context3.next = 14;
          return regeneratorRuntime.awrap(_fsExtra["default"].writeFile('bower.json', JSON.stringify(bower, null, 2)));

        case 14:
        case "end":
          return _context3.stop();
      }
    }
  });
});

exports.bower = bower;

function getContributors(user, repo) {
  var maxCount,
      contributors,
      _args5 = arguments;
  return regeneratorRuntime.async(function getContributors$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          maxCount = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : 1;
          _context5.next = 3;
          return regeneratorRuntime.awrap(_index["default"].get("https://api.github.com/repos/".concat(encodeURIComponent(user), "/").concat(encodeURIComponent(repo), "/contributors"), {
            params: {
              per_page: maxCount
            }
          }));

        case 3:
          contributors = _context5.sent.data;
          return _context5.abrupt("return", Promise.all(contributors.map(function _callee4(contributor) {
            return regeneratorRuntime.async(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.t0 = _objectSpread;
                    _context4.t1 = {};
                    _context4.t2 = contributor;
                    _context4.t3 = {};
                    _context4.next = 6;
                    return regeneratorRuntime.awrap(_index["default"].get("https://api.github.com/users/".concat(encodeURIComponent(contributor.login))));

                  case 6:
                    _context4.t4 = _context4.sent.data;
                    return _context4.abrupt("return", (0, _context4.t0)(_context4.t1, _context4.t2, _context4.t3, _context4.t4));

                  case 8:
                  case "end":
                    return _context4.stop();
                }
              }
            });
          })));

        case 5:
        case "end":
          return _context5.stop();
      }
    }
  });
}

var packageJSON = _gulp["default"].task('package', function _callee5() {
  var CONTRIBUTION_THRESHOLD, npm, contributors;
  return regeneratorRuntime.async(function _callee5$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          CONTRIBUTION_THRESHOLD = 3;
          _context6.t0 = JSON;
          _context6.next = 4;
          return regeneratorRuntime.awrap(_fsExtra["default"].readFile('package.json'));

        case 4:
          _context6.t1 = _context6.sent;
          npm = _context6.t0.parse.call(_context6.t0, _context6.t1);
          _context6.prev = 6;
          _context6.next = 9;
          return regeneratorRuntime.awrap(getContributors('axios', 'axios', 15));

        case 9:
          contributors = _context6.sent;
          npm.contributors = contributors.filter(function (_ref) {
            var type = _ref.type,
                contributions = _ref.contributions;
            return type.toLowerCase() === 'user' && contributions >= CONTRIBUTION_THRESHOLD;
          }).map(function (_ref2) {
            var login = _ref2.login,
                name = _ref2.name,
                url = _ref2.url;
            return "".concat(name || login, " (https://github.com/").concat(login, ")");
          });
          _context6.next = 13;
          return regeneratorRuntime.awrap(_fsExtra["default"].writeFile('package.json', JSON.stringify(npm, null, 2)));

        case 13:
          _context6.next = 20;
          break;

        case 15:
          _context6.prev = 15;
          _context6.t2 = _context6["catch"](6);

          if (!(_index["default"].isAxiosError(_context6.t2) && _context6.t2.response && _context6.t2.response.status === 403)) {
            _context6.next = 19;
            break;
          }

          throw Error("GitHub API Error: ".concat(_context6.t2.response.data && _context6.t2.response.data.message));

        case 19:
          throw _context6.t2;

        case 20:
        case "end":
          return _context6.stop();
      }
    }
  }, null, null, [[6, 15]]);
});

exports.packageJSON = packageJSON;

var env = _gulp["default"].task('env', function _callee6() {
  var npm;
  return regeneratorRuntime.async(function _callee6$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          _context7.t0 = JSON;
          _context7.next = 3;
          return regeneratorRuntime.awrap(_fsExtra["default"].readFile('package.json'));

        case 3:
          _context7.t1 = _context7.sent;
          npm = _context7.t0.parse.call(_context7.t0, _context7.t1);
          _context7.next = 7;
          return regeneratorRuntime.awrap(_fsExtra["default"].writeFile('./lib/env/data.js', Object.entries({
            VERSION: npm.version
          }).map(function (_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2),
                key = _ref4[0],
                value = _ref4[1];

            return "export const ".concat(key, " = ").concat(JSON.stringify(value), ";");
          }).join('\n')));

        case 7:
        case "end":
          return _context7.stop();
      }
    }
  });
});

exports.env = env;

var version = _gulp["default"].series('bower', 'env', 'package');

exports.version = version;